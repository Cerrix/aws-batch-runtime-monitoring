{
    "Comment": "This is your state machine",
    "StartAt": "Check Event for Error",
    "States": {
        "Check Event for Error": {
            "Type": "Choice",
            "Choices": [{
                "Not": {
                    "Variable": "$.detail.errorCode",
                    "IsPresent": true
                },
                "Next": "Get Fields DDB"
            }],
            "Default": "Success"
        },
        "Get Fields DDB": {
            "Type": "Pass",
            "Next": "DynamoDB PutItem",
            "Comment": "Filter the elements using json path",
            "Parameters": {
                "detail.$": "$.detail",
                "AvailabilityZone.$": "$.detail.responseElements.containerInstance.attributes[?(@.name=='ecs.availability-zone')].value",
                "InstanceType.$": "$.detail.responseElements.containerInstance.attributes[?(@.name=='ecs.instance-type')].value",
                "AmiId.$": "$.detail.responseElements.containerInstance.attributes[?(@.name=='ecs.ami-id')].value",
                "CPU.$": "$.detail.responseElements.containerInstance.registeredResources[?(@.name=='CPU')].integerValue",
                "Memory.$": "$.detail.responseElements.containerInstance.registeredResources[?(@.name=='MEMORY')].integerValue"
            }
        },
        "DynamoDB PutItem": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Parameters": {
                "TableName": "${ECSRegistrationTable}",
                "ConditionExpression": "attribute_not_exists(ContainerInstanceId)",
                "Item": {
                    "ContainerInstanceId": {
                        "S.$": "$.detail.responseElements.containerInstance.containerInstanceArn"
                    },
                    "InstanceId": {
                        "S.$": "$.detail.responseElements.containerInstance.ec2InstanceId"
                    },
                    "LastEventTime": {
                        "S.$": "$.detail.eventTime"
                    },
                    "LastEventType": {
                        "S.$": "$.detail.eventName"
                    },
                    "ECSCluster": {
                        "S.$": "$.detail.requestParameters.cluster"
                    },
                    "AvailabilityZone": {
                        "S.$": "$.AvailabilityZone[0]"
                    },
                    "InstanceType": {
                        "S.$": "$.InstanceType[0]"
                    },
                    "AmiId": {
                        "S.$": "$.AmiId[0]"
                    },
                    "CPU": {
                        "N.$": "States.Format('{}',$.CPU[0])"
                    },
                    "Memory": {
                        "N.$": "States.Format('{}',$.Memory[0])"
                    },
                    "Events": {
                        "L": [{
                            "M": {
                                "EventType": {
                                    "S.$": "$.detail.eventName"
                                },
                                "EventTime": {
                                    "S.$": "$.detail.eventTime"
                                }
                            }
                        }]
                    }
                }
            },
            "Next": "Get Fields SQS",
            "Catch": [{
                "ErrorEquals": ["DynamoDB.ConditionalCheckFailedException"],
                "Next": "DynamoDB UpdateItem",
                "Comment": "Item exist in the database, appending"
            }]
        },
        "DynamoDB UpdateItem": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "InputPath": "$$.Execution.Input",
            "Parameters": {
                "TableName": "${ECSRegistrationTable}",
                "Key": {
                    "ContainerInstanceId": {
                        "S.$": "$.detail.responseElements.containerInstance.containerInstanceArn"
                    }
                },
                "UpdateExpression": "SET LastEventTime = :LastEventTime, LastEventType = :LastEventType, Events = list_append(Events, :NewEvent)",
                "ExpressionAttributeValues": {
                    ":NewEvent": {
                        "L": [{
                            "M": {
                                "EventType": {
                                    "S.$": "$.detail.eventName"
                                },
                                "EventTime": {
                                    "S.$": "$.detail.eventTime"
                                }
                            }
                        }]
                    },
                    ":LastEventTime": {
                        "S.$": "$.detail.eventTime"
                    },
                    ":LastEventType": {
                        "S.$": "$.detail.eventName"
                    }
                }
            },
            "Retry": [{
                "ErrorEquals": ["States.ALL"],
                "IntervalSeconds": 1,
                "BackoffRate": 2.0,
                "MaxAttempts": 10
            }],
            "Next": "Get Fields SQS"
        },
        "Get Fields SQS": {
            "Type": "Pass",
            "Next": "SQS SendMessage",
            "Comment": "Filter the elements using json path",
            "Parameters": {
                "detail.$": "$$.Execution.Input.detail",
                "AvailabilityZone.$": "$$.Execution.Input.detail.responseElements.containerInstance.attributes[?(@.name=='ecs.availability-zone')].value",
                "InstanceType.$": "$$.Execution.Input.detail.responseElements.containerInstance.attributes[?(@.name=='ecs.instance-type')].value",
                "AmiId.$": "$$.Execution.Input.detail.responseElements.containerInstance.attributes[?(@.name=='ecs.ami-id')].value",
                "CPU.$": "$$.Execution.Input.detail.responseElements.containerInstance.registeredResources[?(@.name=='CPU')].integerValue",
                "Memory.$": "$$.Execution.Input.detail.responseElements.containerInstance.registeredResources[?(@.name=='MEMORY')].integerValue"
            }
        },
        "SQS SendMessage": {
            "Type": "Task",
            "Resource": "arn:aws:states:::sqs:sendMessage",
            "Parameters": {
                "QueueUrl": "${SQSMetricsQueue}",
                "MessageBody": {
                    "Dimensions": {
                        "AvailabilityZone.$": "$.AvailabilityZone[0]",
                        "ECSCluster.$": "$.detail.requestParameters.cluster",
                        "InstanceType.$": "$.InstanceType[0]"
                    },
                    "Properties": {
                        "InstanceId.$": "$.detail.responseElements.containerInstance.ec2InstanceId",
                        "ECSCluster.$": "$.detail.requestParameters.cluster",
                        "InstanceType.$": "$.InstanceType[0]",
                        "AvailabilityZone.$": "$.AvailabilityZone[0]"
                    },
                    "LastEventType.$": "$.detail.eventName",
                    "MetricTime.$": "$.detail.eventTime"
                }
            },
            "Retry": [{
                "ErrorEquals": ["States.ALL"],
                "IntervalSeconds": 1,
                "BackoffRate": 2.0,
                "MaxAttempts": 10
            }],
            "Next": "Success"
        },
        "Success": {
            "Type": "Succeed"
        }
    }
}
